<script>
      var cryptoZombies;
      var userAccount;

      function startApp() {
        var cryptoZombiesAddress = "YOUR_CONTRACT_ADDRESS";
        cryptoZombies = new web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);

        var accountInterval = setInterval(function() {
          // Controlla se l'account è stato modificato
          if (web3.eth.accounts[0] !== userAccount) {
            userAccount = web3.eth.accounts[0];
            // Chiama alcune funzioni per aggiornare l'interfaccia utente (UI) con il nuovo account
            getZombiesByOwner(userAccount)
            .then(displayZombies);
          }
        }, 100);

        // Inizia qui
      }

      function displayZombies(ids) {
        $("#zombies").empty();
        for (id of ids) {
          // Cerca i dettagli degli zombi dal nostro contratto. Restituisce un oggetto `zombie`
          getZombieDetails(id)
          .then(function(zombie) {
            // Utilizzo dei "template literals" di ES6 per iniettare variabili nel codice HTML.
            // Aggiungi ognuno al nostro div #zombies
            $("#zombies").append(`<div class="zombie">
              <ul>
                <li>Name: ${zombie.name}</li>
                <li>DNA: ${zombie.dna}</li>
                <li>Level: ${zombie.level}</li>
                <li>Wins: ${zombie.winCount}</li>
                <li>Losses: ${zombie.lossCount}</li>
                <li>Ready Time: ${zombie.readyTime}</li>
              </ul>
            </div>`);
          });
        }
      }

      function createRandomZombie(name) {
        // Ci vorrà del tempo, quindi aggiorna l'interfaccia utente per informare l'utente che
        // la transazione è stata inviata
        $("#txStatus").text("Creating new zombie on the blockchain. This may take a while...");
        // Invia la tx (Id della transazione) al nostro contratto:
        return cryptoZombies.methods.createRandomZombie(name)
        .send({ from: userAccount })
        .on("receipt", function(receipt) {
          $("#txStatus").text("Successfully created " + name + "!");
          // La transazione è stata accettata nella blockchain, ridisegniamo l'interfaccia utente (UI)
          getZombiesByOwner(userAccount).then(displayZombies);
        })
        .on("error", function(error) {
          // Fai qualcosa per avvisare l'utente che la sua transazione è fallita
          $("#txStatus").text(error);
        });
      }

      function feedOnKitty(zombieId, kittyId) {
        $("#txStatus").text("Eating a kitty. This may take a while...");
        return cryptoZombies.methods.feedOnKitty(zombieId, kittyId)
        .send({ from: userAccount })
        .on("receipt", function(receipt) {
          $("#txStatus").text("Ate a kitty and spawned a new Zombie!");
          getZombiesByOwner(userAccount).then(displayZombies);
        })
        .on("error", function(error) {
          $("#txStatus").text(error);
        });
      }

      function levelUp(zombieId) {
        $("#txStatus").text("Leveling up your zombie...");
        return cryptoZombies.methods.levelUp(zombieId)
        .send({ from: userAccount, value: web3.utils.toWei("0.001", "ether") })
        .on("receipt", function(receipt) {
          $("#txStatus").text("Power overwhelming! Zombie successfully leveled up");
        })
        .on("error", function(error) {
          $("#txStatus").text(error);
        });
      }

      function getZombieDetails(id) {
        return cryptoZombies.methods.zombies(id).call()
      }

      function zombieToOwner(id) {
        return cryptoZombies.methods.zombieToOwner(id).call()
      }

      function getZombiesByOwner(owner) {
        return cryptoZombies.methods.getZombiesByOwner(owner).call()
      }

      window.addEventListener('load', function() {

        // Verifica se Web3 è stato iniettato dal browser (Mist/MetaMask)
        if (typeof web3 !== 'undefined') {
          // Usa il provider Mist/MetaMask
          web3js = new Web3(web3.currentProvider);
        } else {
        // Gestire il caso in cui l'utente non ha installato Metamask
        // Probabilmente mostrare loro un messaggio che richiede di installare Metamask
        }

        // Ora puoi avviare la tua app e accedere a web3 liberamente:
        startApp()

      })
    </script>